from collections import deque
from typing import List

class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        reverse_graph = [[] for _ in range(n)]
        indegree = [0] * n

        # Build reverse graph and indegree array
        for src in range(n):
            for dest in graph[src]:
                reverse_graph[dest].append(src)
                indegree[src] += 1

        # Start with terminal nodes (indegree == 0)
        queue = deque([node for node in range(n) if indegree[node] == 0])
        safe_nodes = []

        while queue:
            node = queue.popleft()
            safe_nodes.append(node)

            for neighbor in reverse_graph[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)

        # Return sorted list of safe nodes
        return sorted(safe_nodes)
